memberSearchIndex = [{"p":"algo","c":"Pcc","l":"addRequest(Tour, Intersection, Intersection, Integer, Integer, Integer, Integer)","url":"addRequest(modele.Tour,modele.Intersection,modele.Intersection,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)"},{"p":"algo","c":"Pcc","l":"changeOrder(Tour, Intersection, int)","url":"changeOrder(modele.Tour,modele.Intersection,int)"},{"p":"algo","c":"Pcc","l":"computeGooodTSPTour()"},{"p":"algo","c":"Pcc","l":"computePcc()"},{"p":"algo","c":"Pcc","l":"computeWaysList(List<Intersection>)","url":"computeWaysList(java.util.List)"},{"p":"algo","c":"Pcc","l":"deleteIntersection(Tour, Intersection)","url":"deleteIntersection(modele.Tour,modele.Intersection)"},{"p":"algo","c":"Pcc","l":"getBikeVelocity()"},{"p":"algo","c":"Pcc","l":"getDuration()"},{"p":"algo","c":"Pcc","l":"getRoads(Intersection, Intersection)","url":"getRoads(modele.Intersection,modele.Intersection)"},{"p":"algo","c":"Pcc","l":"Pcc()","url":"%3Cinit%3E()"},{"p":"algo","c":"Pcc","l":"Pcc(CityMap, Request)","url":"%3Cinit%3E(modele.CityMap,modele.Request)"},{"p":"algo","c":"Pcc","l":"setBikeVelocity(double)"}]