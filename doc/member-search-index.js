memberSearchIndex = [{"p":"view","c":"ButtonListener","l":"actionPerformed(ActionEvent)","url":"actionPerformed(java.awt.event.ActionEvent)"},{"p":"controller","c":"ListOfCommands","l":"add(Command)","url":"add(controller.Command)"},{"p":"modele","c":"Tour","l":"addAllSegmentsInPath(List<Way>)","url":"addAllSegmentsInPath(java.util.List)"},{"p":"modele","c":"CityMap","l":"addIntersection(Intersection)","url":"addIntersection(modele.Intersection)"},{"p":"observer","c":"Observable","l":"addObserver(Observer)","url":"addObserver(observer.Observer)"},{"p":"modele","c":"Intersection","l":"addOutboundSegment(Segment)","url":"addOutboundSegment(modele.Segment)"},{"p":"controller","c":"Controller","l":"addRequest()"},{"p":"controller","c":"State","l":"addRequest(Controller, Window)","url":"addRequest(controller.Controller,view.Window)"},{"p":"controller","c":"TourModificationState","l":"addRequest(Controller, Window)","url":"addRequest(controller.Controller,view.Window)"},{"p":"modele","c":"Request","l":"addRequest(Intersection, Intersection, Integer, Integer)","url":"addRequest(modele.Intersection,modele.Intersection,java.lang.Integer,java.lang.Integer)"},{"p":"algo","c":"Pcc","l":"addRequest(Tour, Intersection, Intersection, Integer, Integer, Integer, Integer)","url":"addRequest(modele.Tour,modele.Intersection,modele.Intersection,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.Integer)"},{"p":"controller","c":"AddRequestState","l":"AddRequestState()","url":"%3Cinit%3E()"},{"p":"controller","c":"AddRequestState2","l":"AddRequestState2()","url":"%3Cinit%3E()"},{"p":"modele","c":"CityMap","l":"addSegment(Segment)","url":"addSegment(modele.Segment)"},{"p":"modele","c":"Tour","l":"addSegmentInPath(Way)","url":"addSegmentInPath(modele.Way)"},{"p":"modele","c":"Tour","l":"addWayInwaysList(Way)","url":"addWayInwaysList(modele.Way)"},{"p":"view","c":"ButtonListener","l":"ButtonListener(Controller)","url":"%3Cinit%3E(controller.Controller)"},{"p":"view","c":"ButtonWay","l":"ButtonWay(Way, ActionListener, String)","url":"%3Cinit%3E(modele.Way,java.awt.event.ActionListener,java.lang.String)"},{"p":"controller","c":"ListOfCommands","l":"cancel()"},{"p":"view","c":"Window","l":"changeOptionalsButtonsVisibility()"},{"p":"algo","c":"Pcc","l":"changeOrder(Tour, Intersection, int)","url":"changeOrder(modele.Tour,modele.Intersection,int)"},{"p":"controller","c":"ChangeOrderCommand","l":"ChangeOrderCommand(Pcc, Tour, Intersection, int)","url":"%3Cinit%3E(algo.Pcc,modele.Tour,modele.Intersection,int)"},{"p":"controller","c":"ChangeOrderState","l":"ChangeOrderState()","url":"%3Cinit%3E()"},{"p":"modele","c":"CityMap","l":"CityMap()","url":"%3Cinit%3E()"},{"p":"modele","c":"CityMap","l":"CityMap(List<Intersection>, List<Segment>)","url":"%3Cinit%3E(java.util.List,java.util.List)"},{"p":"view","c":"TextualView","l":"clearAllTextArea()"},{"p":"modele","c":"Tour","l":"ClearTour()"},{"p":"controller","c":"ChangeOrderState","l":"clickOnStep(Controller, Window, ListOfCommands, Way, JButton, Tour)","url":"clickOnStep(controller.Controller,view.Window,controller.ListOfCommands,modele.Way,javax.swing.JButton,modele.Tour)"},{"p":"controller","c":"DeleteStepState","l":"clickOnStep(Controller, Window, ListOfCommands, Way, JButton, Tour)","url":"clickOnStep(controller.Controller,view.Window,controller.ListOfCommands,modele.Way,javax.swing.JButton,modele.Tour)"},{"p":"controller","c":"RequestLoadedState","l":"clickOnStep(Controller, Window, ListOfCommands, Way, JButton, Tour)","url":"clickOnStep(controller.Controller,view.Window,controller.ListOfCommands,modele.Way,javax.swing.JButton,modele.Tour)"},{"p":"controller","c":"State","l":"clickOnStep(Controller, Window, ListOfCommands, Way, JButton, Tour)","url":"clickOnStep(controller.Controller,view.Window,controller.ListOfCommands,modele.Way,javax.swing.JButton,modele.Tour)"},{"p":"controller","c":"TourModificationState","l":"clickOnStep(Controller, Window, ListOfCommands, Way, JButton, Tour)","url":"clickOnStep(controller.Controller,view.Window,controller.ListOfCommands,modele.Way,javax.swing.JButton,modele.Tour)"},{"p":"controller","c":"Controller","l":"clickOnStep(Way, JButton)","url":"clickOnStep(modele.Way,javax.swing.JButton)"},{"p":"algo","c":"IntersectionPcc","l":"compareTo(IntersectionPcc)","url":"compareTo(algo.IntersectionPcc)"},{"p":"algo","c":"CompleteGraph","l":"CompleteGraph(List<Intersection>)","url":"%3Cinit%3E(java.util.List)"},{"p":"algo","c":"Pcc","l":"computeGooodTSPTour()"},{"p":"algo","c":"Pcc","l":"computePcc()"},{"p":"controller","c":"Controller","l":"computeTour()"},{"p":"controller","c":"InitState","l":"computeTour(Controller, Window, Tour)","url":"computeTour(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"MapLoadedState","l":"computeTour(Controller, Window, Tour)","url":"computeTour(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"RequestLoadedState","l":"computeTour(Controller, Window, Tour)","url":"computeTour(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"State","l":"computeTour(Controller, Window, Tour)","url":"computeTour(controller.Controller,view.Window,modele.Tour)"},{"p":"algo","c":"Pcc","l":"computeWaysList(List<Intersection>)","url":"computeWaysList(java.util.List)"},{"p":"controller","c":"Controller","l":"Controller()","url":"%3Cinit%3E()"},{"p":"view","c":"Window","l":"createDialogBoxToGetFilePath()"},{"p":"modele","c":"PointFactory","l":"createPoint(int, int)","url":"createPoint(int,int)"},{"p":"modele","c":"PointFactory","l":"createPoint(Intersection)","url":"createPoint(modele.Intersection)"},{"p":"controller","c":"Controller","l":"deleteAStep()"},{"p":"controller","c":"State","l":"deleteAStep(Controller, Window)","url":"deleteAStep(controller.Controller,view.Window)"},{"p":"controller","c":"TourModificationState","l":"deleteAStep(Controller, Window)","url":"deleteAStep(controller.Controller,view.Window)"},{"p":"algo","c":"Pcc","l":"deleteStep(Tour, Intersection)","url":"deleteStep(modele.Tour,modele.Intersection)"},{"p":"controller","c":"DeleteStepCommand","l":"DeleteStepCommand(Pcc, Tour, Intersection)","url":"%3Cinit%3E(algo.Pcc,modele.Tour,modele.Intersection)"},{"p":"controller","c":"DeleteStepState","l":"DeleteStepState()","url":"%3Cinit%3E()"},{"p":"view","c":"Window","l":"displaySelectOrderDialog()"},{"p":"view","c":"Window","l":"displaySelectTimeDialog(String)","url":"displaySelectTimeDialog(java.lang.String)"},{"p":"modele","c":"Point","l":"distance(Point)","url":"distance(modele.Point)"},{"p":"modele","c":"Point","l":"distanceWithCoordinates(int, int)","url":"distanceWithCoordinates(int,int)"},{"p":"modele","c":"Point","l":"distBetweenPointAndLine(int, int, int, int)","url":"distBetweenPointAndLine(int,int,int,int)"},{"p":"controller","c":"ChangeOrderCommand","l":"doCommand()"},{"p":"controller","c":"Command","l":"doCommand()"},{"p":"controller","c":"DeleteStepCommand","l":"doCommand()"},{"p":"algo","c":"Pcc","l":"doDijkstra(ArrayList<Intersection>, Intersection, HashMap<Long, IntersectionPcc>)","url":"doDijkstra(java.util.ArrayList,modele.Intersection,java.util.HashMap)"},{"p":"modele","c":"Way","l":"getArrival()"},{"p":"modele","c":"Way","l":"getArrivalTime()"},{"p":"algo","c":"Pcc","l":"getBikeVelocity()"},{"p":"view","c":"GraphicalView","l":"getCityMap()"},{"p":"algo","c":"IntersectionPcc","l":"getColor()"},{"p":"modele","c":"Intersection","l":"getCoordinates()"},{"p":"algo","c":"IntersectionPcc","l":"getCost()"},{"p":"algo","c":"CompleteGraph","l":"getCost(int, int)","url":"getCost(int,int)"},{"p":"algo","c":"Graph","l":"getCost(int, int)","url":"getCost(int,int)"},{"p":"modele","c":"Request","l":"getDeliveryFromPickUp(Long)","url":"getDeliveryFromPickUp(java.lang.Long)"},{"p":"modele","c":"Request","l":"getDeliveryLocations()"},{"p":"modele","c":"Request","l":"getDeliveryLocationsIterator()"},{"p":"modele","c":"Way","l":"getDeparture()"},{"p":"modele","c":"Way","l":"getDepartureTime()"},{"p":"modele","c":"Segment","l":"getDestination()"},{"p":"algo","c":"Pcc","l":"getDuration()"},{"p":"modele","c":"Request","l":"getDurationPickUpDelivery(Long)","url":"getDurationPickUpDelivery(java.lang.Long)"},{"p":"view","c":"Window","l":"getGraphicalView()"},{"p":"view","c":"GraphicalView","l":"getHighlightedIntersectionId()"},{"p":"modele","c":"Intersection","l":"getId()"},{"p":"algo","c":"CompleteGraph","l":"getIdFromIndex(Integer)","url":"getIdFromIndex(java.lang.Integer)"},{"p":"algo","c":"Graph","l":"getIdFromIndex(Integer)","url":"getIdFromIndex(java.lang.Integer)"},{"p":"algo","c":"CompleteGraph","l":"getIndex(Long)","url":"getIndex(java.lang.Long)"},{"p":"algo","c":"Graph","l":"getIndex(Long)","url":"getIndex(java.lang.Long)"},{"p":"modele","c":"Tour","l":"getIndex(Long)","url":"getIndex(java.lang.Long)"},{"p":"modele","c":"CityMap","l":"getIntersectionFromAddress(Long)","url":"getIntersectionFromAddress(java.lang.Long)"},{"p":"modele","c":"CityMap","l":"getIntersections()"},{"p":"modele","c":"CityMap","l":"getIntersectionsIterator()"},{"p":"modele","c":"Tour","l":"getIsPositionConsistent()"},{"p":"modele","c":"Intersection","l":"getLatitude()"},{"p":"modele","c":"Segment","l":"getLength()"},{"p":"modele","c":"Intersection","l":"getLongitude()"},{"p":"modele","c":"CityMap","l":"getMaxLatitude()"},{"p":"modele","c":"CityMap","l":"getMaxLongitude()"},{"p":"modele","c":"CityMap","l":"getMinLatitude()"},{"p":"modele","c":"CityMap","l":"getMinLongitude()"},{"p":"modele","c":"Segment","l":"getName()"},{"p":"algo","c":"CompleteGraph","l":"getNbVertices()"},{"p":"algo","c":"Graph","l":"getNbVertices()"},{"p":"modele","c":"Intersection","l":"getNeighbors()"},{"p":"modele","c":"Segment","l":"getOrigin()"},{"p":"modele","c":"Intersection","l":"getOutboundSegments()"},{"p":"modele","c":"Request","l":"getPickUpLocations()"},{"p":"modele","c":"Request","l":"getPickUpLocationsIterator()"},{"p":"modele","c":"Tour","l":"getRequest()"},{"p":"view","c":"GraphicalView","l":"getRequest()"},{"p":"algo","c":"Pcc","l":"getRoads(Intersection, Intersection)","url":"getRoads(modele.Intersection,modele.Intersection)"},{"p":"view","c":"TextualView","l":"getScrollPane()"},{"p":"modele","c":"Way","l":"getSegmentList()"},{"p":"modele","c":"Way","l":"getSegmentListIterator()"},{"p":"modele","c":"CityMap","l":"getSegments()"},{"p":"modele","c":"CityMap","l":"getSegmentsIterator()"},{"p":"algo","c":"TSP","l":"getSolution(Integer)","url":"getSolution(java.lang.Integer)"},{"p":"algo","c":"TemplateTSP","l":"getSolution(Integer)","url":"getSolution(java.lang.Integer)"},{"p":"algo","c":"TSP","l":"getSolutionCost()"},{"p":"algo","c":"TemplateTSP","l":"getSolutionCost()"},{"p":"modele","c":"Tour","l":"getStartingIntersection()"},{"p":"modele","c":"Request","l":"getStartingLocation()"},{"p":"modele","c":"Request","l":"getStartingTime()"},{"p":"modele","c":"Way","l":"getStartingTime()"},{"p":"modele","c":"Way","l":"getStayingDurationForDeparturePoint()"},{"p":"view","c":"Window","l":"getTextualView()"},{"p":"view","c":"GraphicalView","l":"getTour()"},{"p":"view","c":"ButtonWay","l":"getWay()"},{"p":"modele","c":"Way","l":"getWayDuration()"},{"p":"modele","c":"Tour","l":"getWaysList()"},{"p":"modele","c":"Tour","l":"getWaysListIterator()"},{"p":"modele","c":"Point","l":"getX()"},{"p":"modele","c":"Point","l":"getY()"},{"p":"view","c":"GraphicalView","l":"GraphicalView(Tour)","url":"%3Cinit%3E(modele.Tour)"},{"p":"modele","c":"Request","l":"hasDelivery(Long)","url":"hasDelivery(java.lang.Long)"},{"p":"algo","c":"SeqIter","l":"hasNext()"},{"p":"view","c":"GraphicalView","l":"highlight(Segment)","url":"highlight(modele.Segment)"},{"p":"modele","c":"Point","l":"inBox(int, int, int, int)","url":"inBox(int,int,int,int)"},{"p":"algo","c":"TSP1","l":"init()"},{"p":"algo","c":"TemplateTSP","l":"init()"},{"p":"modele","c":"PointFactory","l":"initPointFactory(GraphicalView, CityMap)","url":"initPointFactory(view.GraphicalView,modele.CityMap)"},{"p":"modele","c":"Tour","l":"initPositionConsistent()"},{"p":"controller","c":"InitState","l":"InitState()","url":"%3Cinit%3E()"},{"p":"modele","c":"Intersection","l":"Intersection(Long, double, double, ArrayList<Segment>)","url":"%3Cinit%3E(java.lang.Long,double,double,java.util.ArrayList)"},{"p":"algo","c":"IntersectionPcc","l":"IntersectionPcc(Intersection, Integer, Double)","url":"%3Cinit%3E(modele.Intersection,java.lang.Integer,java.lang.Double)"},{"p":"modele","c":"PointFactory","l":"intersectionToPixelLattitude(Intersection)","url":"intersectionToPixelLattitude(modele.Intersection)"},{"p":"modele","c":"PointFactory","l":"intersectionToPixelLongitude(Intersection)","url":"intersectionToPixelLongitude(modele.Intersection)"},{"p":"xml","c":"InvalidMapException","l":"InvalidMapException(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"xml","c":"InvalidRequestException","l":"InvalidRequestException(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"algo","c":"CompleteGraph","l":"isArc(int, int)","url":"isArc(int,int)"},{"p":"algo","c":"Graph","l":"isArc(int, int)","url":"isArc(int,int)"},{"p":"view","c":"Window","l":"isOptionalsButtonsVisible()"},{"p":"modele","c":"Request","l":"isPickUp(Long)","url":"isPickUp(java.lang.Long)"},{"p":"modele","c":"Tour","l":"isPositionConsistent(Long)","url":"isPositionConsistent(java.lang.Long)"},{"p":"controller","c":"AddRequestState","l":"leftClick(Point, Controller, Window)","url":"leftClick(modele.Point,controller.Controller,view.Window)"},{"p":"controller","c":"AddRequestState2","l":"leftClick(Point, Controller, Window)","url":"leftClick(modele.Point,controller.Controller,view.Window)"},{"p":"controller","c":"State","l":"leftClick(Point, Controller, Window)","url":"leftClick(modele.Point,controller.Controller,view.Window)"},{"p":"controller","c":"Controller","l":"leftClick(Point, Window)","url":"leftClick(modele.Point,view.Window)"},{"p":"controller","c":"ListOfCommands","l":"ListOfCommands()","url":"%3Cinit%3E()"},{"p":"controller","c":"Controller","l":"loadMap()"},{"p":"controller","c":"InitState","l":"loadMap(Controller, Window, Tour)","url":"loadMap(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"MapLoadedState","l":"loadMap(Controller, Window, Tour)","url":"loadMap(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"RequestLoadedState","l":"loadMap(Controller, Window, Tour)","url":"loadMap(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"State","l":"loadMap(Controller, Window, Tour)","url":"loadMap(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"Controller","l":"loadRequest()"},{"p":"controller","c":"InitState","l":"loadRequest(Controller, Window, Tour)","url":"loadRequest(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"MapLoadedState","l":"loadRequest(Controller, Window, Tour)","url":"loadRequest(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"RequestLoadedState","l":"loadRequest(Controller, Window, Tour)","url":"loadRequest(controller.Controller,view.Window,modele.Tour)"},{"p":"controller","c":"State","l":"loadRequest(Controller, Window, Tour)","url":"loadRequest(controller.Controller,view.Window,modele.Tour)"},{"p":"app","c":"Main","l":"Main()","url":"%3Cinit%3E()"},{"p":"app","c":"Main","l":"main(String[])","url":"main(java.lang.String[])"},{"p":"controller","c":"MapLoadedState","l":"MapLoadedState()","url":"%3Cinit%3E()"},{"p":"controller","c":"Controller","l":"modifyOrder()"},{"p":"controller","c":"State","l":"modifyOrder(Controller, Window)","url":"modifyOrder(controller.Controller,view.Window)"},{"p":"controller","c":"TourModificationState","l":"modifyOrder(Controller, Window)","url":"modifyOrder(controller.Controller,view.Window)"},{"p":"controller","c":"Controller","l":"modifyTour()"},{"p":"controller","c":"AddRequestState","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"AddRequestState2","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"ChangeOrderState","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"InitState","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"MapLoadedState","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"RequestLoadedState","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"State","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"controller","c":"TourModificationState","l":"modifyTour(Controller, Window)","url":"modifyTour(controller.Controller,view.Window)"},{"p":"view","c":"MouseListener","l":"mouseClicked(MouseEvent)","url":"mouseClicked(java.awt.event.MouseEvent)"},{"p":"view","c":"MouseListener","l":"MouseListener(Window, GraphicalView, Controller)","url":"%3Cinit%3E(view.Window,view.GraphicalView,controller.Controller)"},{"p":"controller","c":"AddRequestState","l":"mouseMoved(Controller, Window, Point)","url":"mouseMoved(controller.Controller,view.Window,modele.Point)"},{"p":"controller","c":"AddRequestState2","l":"mouseMoved(Controller, Window, Point)","url":"mouseMoved(controller.Controller,view.Window,modele.Point)"},{"p":"controller","c":"MapLoadedState","l":"mouseMoved(Controller, Window, Point)","url":"mouseMoved(controller.Controller,view.Window,modele.Point)"},{"p":"controller","c":"RequestLoadedState","l":"mouseMoved(Controller, Window, Point)","url":"mouseMoved(controller.Controller,view.Window,modele.Point)"},{"p":"controller","c":"State","l":"mouseMoved(Controller, Window, Point)","url":"mouseMoved(controller.Controller,view.Window,modele.Point)"},{"p":"controller","c":"TourModificationState","l":"mouseMoved(Controller, Window, Point)","url":"mouseMoved(controller.Controller,view.Window,modele.Point)"},{"p":"view","c":"MouseListener","l":"mouseMoved(MouseEvent)","url":"mouseMoved(java.awt.event.MouseEvent)"},{"p":"controller","c":"Controller","l":"mouseMoved(Point)","url":"mouseMoved(modele.Point)"},{"p":"modele","c":"Point","l":"move(int, int)","url":"move(int,int)"},{"p":"algo","c":"SeqIter","l":"next()"},{"p":"observer","c":"Observable","l":"notifyObservers()"},{"p":"observer","c":"Observable","l":"Observable()","url":"%3Cinit%3E()"},{"p":"xml","c":"XMLCityMapParser","l":"parse()"},{"p":"xml","c":"XMLRequestParser","l":"parse()"},{"p":"algo","c":"Pcc","l":"Pcc()","url":"%3Cinit%3E()"},{"p":"algo","c":"Pcc","l":"Pcc(CityMap, Request)","url":"%3Cinit%3E(modele.CityMap,modele.Request)"},{"p":"modele","c":"PointFactory","l":"PointFactory()","url":"%3Cinit%3E()"},{"p":"controller","c":"Controller","l":"redo()"},{"p":"controller","c":"ListOfCommands","l":"redo()"},{"p":"controller","c":"ChangeOrderState","l":"redo(ListOfCommands)","url":"redo(controller.ListOfCommands)"},{"p":"controller","c":"DeleteStepState","l":"redo(ListOfCommands)","url":"redo(controller.ListOfCommands)"},{"p":"controller","c":"State","l":"redo(ListOfCommands)","url":"redo(controller.ListOfCommands)"},{"p":"controller","c":"TourModificationState","l":"redo(ListOfCommands)","url":"redo(controller.ListOfCommands)"},{"p":"modele","c":"Intersection","l":"removeOutboundSegment(Segment)","url":"removeOutboundSegment(modele.Segment)"},{"p":"modele","c":"Request","l":"Request()","url":"%3Cinit%3E()"},{"p":"modele","c":"Request","l":"Request(Intersection, LocalTime, ArrayList<Integer>, ArrayList<Integer>, ArrayList<Intersection>, ArrayList<Intersection>)","url":"%3Cinit%3E(modele.Intersection,java.time.LocalTime,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)"},{"p":"controller","c":"RequestLoadedState","l":"RequestLoadedState()","url":"%3Cinit%3E()"},{"p":"controller","c":"ListOfCommands","l":"reset()"},{"p":"controller","c":"Controller","l":"rightClick()"},{"p":"algo","c":"TSP","l":"searchSolution(Integer)","url":"searchSolution(java.lang.Integer)"},{"p":"algo","c":"TemplateTSP","l":"searchSolution(Integer)","url":"searchSolution(java.lang.Integer)"},{"p":"modele","c":"Segment","l":"Segment()","url":"%3Cinit%3E()"},{"p":"modele","c":"Segment","l":"Segment(double, String, Intersection, Intersection)","url":"%3Cinit%3E(double,java.lang.String,modele.Intersection,modele.Intersection)"},{"p":"algo","c":"SeqIter","l":"SeqIter(Collection<Integer>, int, Graph, Request)","url":"%3Cinit%3E(java.util.Collection,int,algo.Graph,modele.Request)"},{"p":"algo","c":"Pcc","l":"setBikeVelocity(double)"},{"p":"view","c":"GraphicalView","l":"setCityMap(CityMap)","url":"setCityMap(modele.CityMap)"},{"p":"algo","c":"IntersectionPcc","l":"setColor(Integer)","url":"setColor(java.lang.Integer)"},{"p":"modele","c":"Intersection","l":"setCoordinates(Point)","url":"setCoordinates(modele.Point)"},{"p":"algo","c":"IntersectionPcc","l":"setCost(Double)","url":"setCost(java.lang.Double)"},{"p":"view","c":"GraphicalView","l":"setHighlightedWay(Way)","url":"setHighlightedWay(modele.Way)"},{"p":"view","c":"GraphicalView","l":"setHighlightInter(Intersection)","url":"setHighlightInter(modele.Intersection)"},{"p":"modele","c":"CityMap","l":"setIntersectionCordinates(GraphicalView)","url":"setIntersectionCordinates(view.GraphicalView)"},{"p":"modele","c":"Tour","l":"setIsPositionConsistent(HashMap<Long, Boolean>)","url":"setIsPositionConsistent(java.util.HashMap)"},{"p":"modele","c":"Intersection","l":"setLatitude(double)"},{"p":"modele","c":"Intersection","l":"setLongitude(double)"},{"p":"view","c":"Window","l":"setMessage(String)","url":"setMessage(java.lang.String)"},{"p":"modele","c":"Tour","l":"setRequest(Request)","url":"setRequest(modele.Request)"},{"p":"view","c":"GraphicalView","l":"setRequest(Request)","url":"setRequest(modele.Request)"},{"p":"view","c":"TextualView","l":"setScrollPane(JScrollPane)","url":"setScrollPane(javax.swing.JScrollPane)"},{"p":"modele","c":"Tour","l":"setStartingIntersection(Intersection)","url":"setStartingIntersection(modele.Intersection)"},{"p":"view","c":"Window","l":"setStreet(String)","url":"setStreet(java.lang.String)"},{"p":"modele","c":"Tour","l":"setTour(Tour)","url":"setTour(modele.Tour)"},{"p":"view","c":"GraphicalView","l":"setTour(Tour)","url":"setTour(modele.Tour)"},{"p":"view","c":"ButtonWay","l":"setWay(Way)","url":"setWay(modele.Way)"},{"p":"modele","c":"Tour","l":"setWaysList(List<Way>)","url":"setWaysList(java.util.List)"},{"p":"algo","c":"TemplateTSP","l":"TemplateTSP()","url":"%3Cinit%3E()"},{"p":"view","c":"TextualView","l":"TextualView(Tour, ButtonListener)","url":"%3Cinit%3E(modele.Tour,view.ButtonListener)"},{"p":"algo","c":"CompleteGraph","l":"toString()"},{"p":"modele","c":"Intersection","l":"toString()"},{"p":"modele","c":"Request","l":"toString()"},{"p":"modele","c":"Segment","l":"toString()"},{"p":"modele","c":"Tour","l":"Tour()","url":"%3Cinit%3E()"},{"p":"modele","c":"Tour","l":"Tour(Intersection, Request, List<Way>)","url":"%3Cinit%3E(modele.Intersection,modele.Request,java.util.List)"},{"p":"modele","c":"Tour","l":"Tour(Request)","url":"%3Cinit%3E(modele.Request)"},{"p":"controller","c":"TourModificationState","l":"TourModificationState()","url":"%3Cinit%3E()"},{"p":"algo","c":"TSP1","l":"TSP1(Graph, Request, Integer)","url":"%3Cinit%3E(algo.Graph,modele.Request,java.lang.Integer)"},{"p":"controller","c":"Controller","l":"undo()"},{"p":"controller","c":"ListOfCommands","l":"undo()"},{"p":"controller","c":"ChangeOrderState","l":"undo(ListOfCommands)","url":"undo(controller.ListOfCommands)"},{"p":"controller","c":"DeleteStepState","l":"undo(ListOfCommands)","url":"undo(controller.ListOfCommands)"},{"p":"controller","c":"State","l":"undo(ListOfCommands)","url":"undo(controller.ListOfCommands)"},{"p":"controller","c":"TourModificationState","l":"undo(ListOfCommands)","url":"undo(controller.ListOfCommands)"},{"p":"controller","c":"ChangeOrderCommand","l":"undoCommand()"},{"p":"controller","c":"Command","l":"undoCommand()"},{"p":"controller","c":"DeleteStepCommand","l":"undoCommand()"},{"p":"observer","c":"Observer","l":"update(Observable)","url":"update(observer.Observable)"},{"p":"view","c":"GraphicalView","l":"update(Observable)","url":"update(observer.Observable)"},{"p":"view","c":"TextualView","l":"update(Observable)","url":"update(observer.Observable)"},{"p":"algo","c":"CompleteGraph","l":"updateCompleteGraph(Long, HashMap<Long, IntersectionPcc>, List<Intersection>)","url":"updateCompleteGraph(java.lang.Long,java.util.HashMap,java.util.List)"},{"p":"modele","c":"Tour","l":"updateIsPositionConsistent(Long)","url":"updateIsPositionConsistent(java.lang.Long)"},{"p":"modele","c":"Way","l":"Way(List<Segment>, LocalTime, LocalTime, LocalTime, Intersection, Intersection)","url":"%3Cinit%3E(java.util.List,java.time.LocalTime,java.time.LocalTime,java.time.LocalTime,modele.Intersection,modele.Intersection)"},{"p":"view","c":"Window","l":"Window(Controller, Tour)","url":"%3Cinit%3E(controller.Controller,modele.Tour)"},{"p":"xml","c":"XMLCityMapParser","l":"XMLCityMapParser(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"xml","c":"XMLParser","l":"XMLParser(String)","url":"%3Cinit%3E(java.lang.String)"},{"p":"xml","c":"XMLRequestParser","l":"XMLRequestParser(String, CityMap)","url":"%3Cinit%3E(java.lang.String,modele.CityMap)"}]