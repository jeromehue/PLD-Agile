package modele;

import java.util.List;

import observer.Observable;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 * This class contains the informations relative to a Tour.
 * A Tour contains all the informations needed for the delivery man
 * to complete his duties, from start to end. This Tour has been 
 * generated by the TSP algorithm to be as optimal as possible.
 * After the user changes it manually, the tour cannot be guaranteed
 * to stay optimal.
 * 
 * @author H4414
 *
 */
public class Tour extends Observable {
	/**
	 * The Intersection from which the delivery man will leave and
	 * at which he will return at the end of his tour.
	 */
	private Intersection startingIntersection;
	
	/**
	 * The informations given by the user about this tour.
	 */
	private Request request;
	
	/**
	 * The list of ways linking all steps of the tour, as computed
	 * by the TSP algorithm to be as optimal as possible.
	 * It can be edited by the user.
	 */
	private List<Way> waysList;
	
	/**
	 * HashMap linking an Intersection to a boolean, which is false
	 * if the corresponding intersection is a delivery placed before
	 * its corresponding pick-up in the order of the tour, else true. 
	 * 
	 */
	private HashMap<Long, Boolean> isPositionConsistent;

	/**
	 * Constructor used to initialize all fields of this Tour.
	 * The HashMap is initialized by iterating over the waysList 
	 * and the request.
	 * 
	 * @param start		The starting and ending Intersection of this Tour.
	 * @param request	All informations given by the user about this tour.
	 * @param waysList	The list of ways linking all steps of the tour.
	 */
	public Tour(Intersection start, Request request, List<Way> waysList) {
		this.startingIntersection = start;
		this.request = request;
		this.waysList = waysList;
		initPositionConsistent();
	}

	/**
	 * Constructor used to initialize some fields of this Tour.
	 * Only the request is being initialized.
	 * 
	 * @param request	All informations given by the user about this tour.
	 */
	public Tour(Request request) {
		this.request = request;
		this.waysList = new ArrayList<Way>();
		initPositionConsistent();
	}

	/**
	 * The copy constructor of a Tour.
	 * 
	 * @param tour The Tour to be copied into this.
	 */
	public Tour(Tour tour) {
		this.startingIntersection = new Intersection(tour.startingIntersection);
		this.request = new Request(tour.getRequest());
		this.waysList = new ArrayList<Way>(tour.getWaysList());
		this.isPositionConsistent = new HashMap<>(tour.isPositionConsistent);
	}
	
	/**
	 * Empty constructor.
	 * Used by the controller to initialize a Tour when no informations
	 * is available about it yet.
	 */
	public Tour() {
		this.startingIntersection = null;
		this.waysList = new ArrayList<Way>();
		this.request = null;
	}

	/**
	 * Used by the constructors to initialize the HashMap 
	 * isPositionConsistent.
	 */
	private void initPositionConsistent() {
		isPositionConsistent = new HashMap<Long, Boolean>();
		for (int i = 0; i < request.getPickUpLocations().size(); ++i) {
			isPositionConsistent.put(request.getPickUpLocations().get(i).getId(), true);
		}
		for (int i = 0; i < request.getDeliveryLocations().size(); ++i) {
			isPositionConsistent.put(request.getDeliveryLocations().get(i).getId(), true);
		}
		isPositionConsistent.put(request.getStartingLocation().getId(), true);
	}

	/**
	 * Default setter. Used to update all fields of this Tour at once.
	 * 
	 * @param t2 The tour to be copied into this.
	 */
	public void setTour(Tour t2) {
		this.startingIntersection = t2.getStartingIntersection();
		this.request = t2.getRequest();
		this.waysList = t2.getWaysList();
		this.isPositionConsistent = t2.getIsPositionConsistent();
	}

	/**
	 * Used to reset this Tour when a new set of requests is loaded.
	 */
	public void clearTour() {
		waysList.clear();
		notifyObservers();
	}

	/**
	 * Default setter.
	 * 
	 * @param request The request to be added or updated into this.
	 */
	public void setRequest(Request request) {
		this.request = request;
	}

	/**
	 * Default setter.
	 * 
	 * @param waysList Used to initialize this wayList when it has
	 * been computed by Pcc.java.
	 */
	public void setWaysList(List<Way> waysList) {
		this.waysList = waysList;
	}

	/**
	 * Used to retrieve an iterator on the list of ways.
	 * Especially useful to display all ways on the map.
	 * 
	 * @return An iterator on this waysList.
	 */
	public Iterator<Way> getWaysListIterator() {
		return this.waysList.iterator();
	}


	/**
	 * Default getter.
	 * 
	 * @return This starting and ending intersection.
	 */
	public Intersection getStartingIntersection() {
		return startingIntersection;
	}

	/**
	 * Default getter.
	 * 
	 * @return The request containing all informations about this
	 * tour that were given by the user.
	 */
	public Request getRequest() {
		return request;
	}

	/**
	 * Default getter.
	 * 
	 * @return The list of ways composing this tour.
	 */
	public List<Way> getWaysList() {
		return waysList;
	}

	/**
	 * Default getter.
	 * 
	 * @return The HashMap used to check if a delivery point is
	 * placed before its corresponding pick-up point in this tour.
	 */
	public HashMap<Long, Boolean> getIsPositionConsistent() {
		return isPositionConsistent;
	}

	/**
	 * Used when a step of the tour has been modified to update this HashMap
	 * checking if a delivery point is placed before its corresponding 
	 * pick-up point in this tour.
	 * 
	 * @param idInterToCheck The id of the intersection that was modified in the tour.
	 */
	public void updateIsPositionConsistent(Long idInterToCheck) {
		boolean isPositionConsistent = false;

		if (request.getStartingLocation().getId().equals(idInterToCheck)) {
			isPositionConsistent = true;
		} else if (request.isPickUp(idInterToCheck)) {
			isPositionConsistent = true;
		} else {
			int i = 1;// Beginning is after start Point
			Intersection currentInter;

			do {
				currentInter = waysList.get(i).getDeparture();
				i++;
				// If interToCheck is a delivery and associated pickup point is before
				if (idInterToCheck.equals(request.getDeliveryFromPickUp(currentInter.getId()))) {
					isPositionConsistent = true;
				}
			} while (i < waysList.size() - 1 && !currentInter.getId().equals(idInterToCheck));
		}
		this.isPositionConsistent.put(idInterToCheck, isPositionConsistent);
	}

	/**
	 * Used to know if an intersection is a delivery point being
	 *  placed before its corresponding pick-up point in this tour.
	 *  
	 * @param idIntersection The id of the intersection to check.
	 * @return				 False if the given intersection is a
	 *  delivery point placed before its corresponding 
	 * pick-up point in this tour, else true.
	 */
	public Boolean isPositionConsistent(Long idIntersection) {
		return this.isPositionConsistent.get(idIntersection);
	}

	/**
	 * Used to retrieve the position of an step on the tour.
	 * 
	 * @param idIntersection The intersection for which we would like
	 * to know the position in the tour.
	 * @return				  The position in the tour.
	 */
	public Integer getIndex(Long idIntersection) {
		int index = -1;
		int i = 0;
		for (Way w : this.waysList) {
			if (w.getDeparture().getId().equals(idIntersection)) {
				index = i;
			}
			i++;
		}
		return index;
	}
}
